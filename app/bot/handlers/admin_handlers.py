from aiogram import types
from aiogram.dispatcher import FSMContext

from app.bot.keyboards.admin_keyboards import (
    get_admin_main_keyboard,
    get_book_confirmation_keyboard,
    get_trade_confirmation_keyboard,
    get_return_confirmation_keyboard
)
from app.bot.states.user_states import AddBook
from app.database.models import User, Book, Trade
from config import load_config

import datetime
import requests
from bs4 import BeautifulSoup

async def process_admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    config = load_config()
    if message.text == config.admin_code:
        session = message.bot.get("db_session")()
        user = session.query(User).filter(User.tg_id == message.chat.id).first()
        user.role = 'admin'
        session.add(user)
        session.commit()
        
        await message.answer(
            "–î–æ–±—Ä–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞",
            reply_markup=get_admin_main_keyboard()
        )

async def process_add_book_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É üîÑ':
        await message.answer(
            '–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ üìò\n'
            '–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –≤ –∫–æ–Ω—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n'
            '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—Ç—Ä–µ—Å.',
            parse_mode=types.ParseMode.MARKDOWN
        )
        await AddBook.name.set()

async def process_book_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    name = message.text
    if 'litres.ru' in name:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –ø–æ —Å—Å—ã–ª–∫–µ
        data = await get_book_info_from_litres(name)
        async with state.proxy() as state_data:
            state_data.update(data)
        await AddBook.amount.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* –∫–Ω–∏–≥',
                           parse_mode=types.ParseMode.MARKDOWN)
    else:
        async with state.proxy() as data:
            data['name'] = name
        await AddBook.genre.set()
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–∂–∞–Ω—Ä* –∫–Ω–∏–≥–∏',
                           parse_mode=types.ParseMode.MARKDOWN)

async def process_book_genre(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞ –∫–Ω–∏–≥–∏"""
    async with state.proxy() as data:
        data['genre'] = message.text
    await AddBook.author.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–∞–≤—Ç–æ—Ä–∞* –∫–Ω–∏–≥–∏',
                        parse_mode=types.ParseMode.MARKDOWN)

async def process_book_author(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    async with state.proxy() as data:
        data['author'] = message.text
    await AddBook.description.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ* –¥–ª—è –∫–Ω–∏–≥–∏',
                        parse_mode=types.ParseMode.MARKDOWN)

async def process_book_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    async with state.proxy() as data:
        data['description'] = message.text
    await AddBook.amount.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* –∫–Ω–∏–≥',
                        parse_mode=types.ParseMode.MARKDOWN)

async def process_book_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥"""
    async with state.proxy() as data:
        data['amount'] = message.text
    await AddBook.sog.set()
    
    data = await state.get_data()
    await message.answer(
        f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: {data["name"]}\n\n'
        f'–ñ–∞–Ω—Ä: {data["genre"]}\n\n'
        f'–ê–≤—Ç–æ—Ä: {data["author"]}\n\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}\n\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥: {data["amount"]}',
        reply_markup=get_book_confirmation_keyboard()
    )

async def process_book_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    if message.text == '–î–∞ ‚úÖ':
        session = message.bot.get("db_session")()
        new_book = Book()
        data = await state.get_data()
        
        new_book.name = data['name']
        new_book.genre = f"{data['genre'][0].upper()}{data['genre'][1:]}"
        new_book.author = data['author']
        new_book.description = data['description']
        new_book.amount = data['amount']
        
        session.add(new_book)
        session.commit()
        
        config = load_config()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–µ
        message_text = (
            f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞! üéâ\n\n'
            f'*{new_book.name}*\n\n'
            f'{new_book.description}\n\n'
            f'*–ê–≤—Ç–æ—Ä*: {new_book.author}\n'
            f'*–ñ–∞–Ω—Ä*: {new_book.genre}\n\n'
            f'–í–∑—è—Ç—å –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ –ø–æ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ](https://t.me/SchoolLibraryLi1_bot?start=take_book_{new_book.book_id})'
        )
        
        channel_message = await message.bot.send_message(
            config.channel_id,
            message_text,
            parse_mode=types.ParseMode.MARKDOWN
        )
        
        new_book.link = f"https://t.me/lyceum_library/{channel_message.message_id}"
        new_book.mes_id = channel_message.message_id
        session.add(new_book)
        session.commit()
        
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                           reply_markup=get_admin_main_keyboard())
    else:
        await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                           reply_markup=get_admin_main_keyboard())
    await state.finish()

async def process_see_debtors(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤"""
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–∂–Ω–∏–∫–æ–≤ üëÄ':
        session = message.bot.get("db_session")()
        trades = session.query(Trade).filter(Trade.status == 'working').all()
        
        if not trades:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤ üëç")
            return
            
        debtors_text = ""
        for i, trade in enumerate(trades, 1):
            user = session.query(User).filter(User.tg_id == trade.user_id).first()
            debtors_text += (
                f"{i}. {user.name} {user.surname} {user.clas} "
                f"–¥–æ–ª–∂–µ–Ω –≤–∞–º –∫–Ω–∏–≥—É {trade.book_name} +{user.phone}\n"
            )
        
        await message.answer(debtors_text)

async def get_book_info_from_litres(url: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ —Å —Å–∞–π—Ç–∞ –õ–∏—Ç–†–µ—Å"""
    headers = {
        'authority': 'www.litres.ru',
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    }
    
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'lxml')
    
    return {
        'name': soup.find('h1', itemprop="name").text[:-5],
        'author': soup.find('a', class_="biblio_book_author__link").text,
        'genre': soup.find('a', class_="biblio_info__link").text,
        'description': soup.find('div', itemprop="description").text
    }

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    dp.register_message_handler(process_admin_command, lambda m: m.text == load_config().admin_code)
    dp.register_message_handler(process_add_book_command, lambda m: m.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É üîÑ', state=None)
    dp.register_message_handler(process_see_debtors, lambda m: m.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–∂–Ω–∏–∫–æ–≤ üëÄ', state=None)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
    dp.register_message_handler(process_book_name, state=AddBook.name)
    dp.register_message_handler(process_book_genre, state=AddBook.genre)
    dp.register_message_handler(process_book_author, state=AddBook.author)
    dp.register_message_handler(process_book_description, state=AddBook.description)
    dp.register_message_handler(process_book_amount, state=AddBook.amount)
    dp.register_message_handler(process_book_confirmation, state=AddBook.sog) 