from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType

from app.bot.keyboards.user_keyboards import (
    get_main_menu, get_book_keyboard, 
    get_phone_request_keyboard, get_navigation_keyboard
)
from app.bot.states.user_states import Login, SeeBook
from app.database.models import User, Book, Trade

import datetime

async def process_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    login = message.text.split()
    
    if len(login) != 3 or not login[0].isalpha() or not login[1].isalpha():
        await message.answer(
            '–í–∏–¥–∏–º–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. üòî\n'
            '–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ 10–ê.*',
            parse_mode=types.ParseMode.MARKDOWN
        )
        return

    async with state.proxy() as data:
        data['login'] = login
    
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, {login[1]}Ô∏è. ‚ò∫\n"
        "–û—Å—Ç–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.Ô∏è",
        reply_markup=get_phone_request_keyboard()
    )
    await Login.phone.set()

async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    data = await state.get_data()
    login = data.get('login')
    
    session = message.bot.get("db_session")()
    new_user = User()
    new_user.tg_id = message.chat.id
    new_user.name = login[1]
    new_user.surname = login[0]
    new_user.clas = login[2]
    new_user.phone = message.contact.phone_number
    new_user.role = 'user'
    new_user.hurry = 0
    new_user.xp = 0
    
    session.add(new_user)
    session.commit()
    
    await state.finish()
    text = {'rus': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', 'tat': '–ò—Å—ç–Ω–º–µ—Å–µ–∑'}
    await message.answer(
        f"{text[new_user.lang]}, {new_user.name} ‚úåÔ∏è",
        reply_markup=get_main_menu(new_user.lang)
    )

async def process_book_list(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    await callback.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∫–Ω–∏–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ ‚¨áÔ∏è')
    
    session = callback.bot.get("db_session")()
    user = session.query(User).filter(User.tg_id == callback.message.chat.id).first()
    
    text = {
        'rus': '–ö–∞–∫–∏–µ –∫–Ω–∏–≥–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?',
        'tat': '–ù–∏–Ω–¥–∏ –∫–∏—Ç–∞–ø–ª–∞—Ä —Å–µ–∑ –∫“Ø—Ä–µ—Ä–≥”ô —Ç–µ–ª”ô—Å”ô–≥–µ–∑?'
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–Ω–∏–≥
    kb = types.InlineKeyboardMarkup(row_width=1)
    buttons = {
        'rus': [
            ('üìñ –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–Ω–∏–≥–∏', 'fr_book'),
            ('üîì –í—Å–µ –∫–Ω–∏–≥–∏', 'al_book'),
            ('üèò –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu')
        ],
        'tat': [
            ('üìñ –ò—Ä–µ–∫–ª–µ –∫–∏—Ç–∞–ø–ª–∞—Ä', 'fr_book'),
            ('üîì –ë–∞—Ä–ª—ã–∫ –∫–∏—Ç–∞–ø–ª–∞—Ä', 'al_book'),
            ('üèò –ë–∞—à –º–µ–Ω—é–Ω–µ –∞—á—ã—Ä–≥–∞', 'menu')
        ]
    }
    
    for text, callback_data in buttons[user.lang]:
        kb.add(types.InlineKeyboardButton(text, callback_data=callback_data))
    
    await callback.message.edit_text(
        text[user.lang],
        reply_markup=kb,
        parse_mode=types.ParseMode.MARKDOWN
    )

async def show_books(message: types.Message, books: list, user: User):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    count = 0
    text = {
        'rus': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è üòâ',
        'tat': '–≠–∑–ª”ô“Ø ”©—á–µ–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–Ω—ã –∫—É–ª–ª–∞–Ω—ã–≥—ã–∑ üòâ'
    }
    
    main_message = await message.answer(
        text[user.lang],
        reply_markup=get_navigation_keyboard(user.lang)
    )
    
    for book in books[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–Ω–∏–≥–∏
        count += 1
        book_message = await message.answer(
            f"{count} - *–ù–∞–∑–≤–∞–Ω–∏–µ:* {book.name}\n"
            f"*      –ñ–∞–Ω—Ä:* {book.genre}\n"
            f"*      –ê–≤—Ç–æ—Ä:* {book.author}",
            parse_mode=types.ParseMode.MARKDOWN,
            reply_markup=get_book_keyboard(book.book_id, int(book.amount), user.lang)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if count == 1:
            user.one = book_message.message_id
        elif count == 2:
            user.two = book_message.message_id
        elif count == 3:
            user.three = book_message.message_id
    
    user.mainMes = main_message.message_id
    user.ziro = str(count)
    user.page = '1'

async def process_free_books(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–Ω–∏–≥"""
    await callback.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–Ω–∏–≥–∏ üîç')
    
    session = callback.bot.get("db_session")()
    user = session.query(User).filter(User.tg_id == callback.message.chat.id).first()
    books = session.query(Book).filter(Book.amount != 0).filter(Book.amount != '0').all()
    
    user.fre = True
    await callback.message.delete()
    await show_books(callback.message, books, user)
    
    session.add(user)
    session.commit()

async def process_all_books(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥"""
    await callback.answer('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ üîé')
    
    session = callback.bot.get("db_session")()
    user = session.query(User).filter(User.tg_id == callback.message.chat.id).first()
    books = session.query(Book).all()
    
    user.fre = False
    await callback.message.delete()
    await show_books(callback.message, books, user)
    
    session.add(user)
    session.commit()

def register_user_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    dp.register_message_handler(process_login, state=Login.login)
    dp.register_message_handler(process_phone, content_types=ContentType.CONTACT, state=Login.phone)
    dp.register_callback_query_handler(process_book_list, lambda c: c.data == "list_of_all")
    dp.register_callback_query_handler(process_free_books, lambda c: c.data == "fr_book")
    dp.register_callback_query_handler(process_all_books, lambda c: c.data == "al_book") 